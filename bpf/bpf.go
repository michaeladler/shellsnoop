//go:generate clang -mcpu=v1 -target bpf -Wall -O2 -c ../src/uretprobe.c -I../include -D__TARGET_ARCH_x86 -I../include -g -o bpf_bpfel_x86.o

// based on the original go:generate (but go run requires network):
// go run github.com/cilium/ebpf/cmd/bpf2go -cc clang -cflags "-O2 -g -Wall $CFLAGS" -target amd64 -type event bpf uretprobe.c -- -I../include

package bpf

import (
	"bytes"
	"context"
	"encoding/binary"
	"errors"
	"fmt"
	"strings"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
	"github.com/michaeladler/shellsnoop/internal/log"
	"github.com/michaeladler/shellsnoop/internal/storage"
	"golang.org/x/sys/unix"
)

const (
	binPath = "/run/current-system/sw/bin/zsh"
	symbol  = "zleentry"
)

// Set up BPF and wait for events. This method runs indefinitely.
func Run(ctx context.Context, uid *int) error {
	logger := log.Logger

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		return err
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		return fmt.Errorf("loading objects: %s", err)
	}
	defer objs.Close()

	// Open an ELF binary and read its symbols.
	ex, err := link.OpenExecutable(binPath)
	if err != nil {
		return fmt.Errorf("opening executable: %s", err)
	}

	// Open a Uretprobe at the exit point of the symbol and attach
	// the pre-compiled eBPF program to it.
	up, err := ex.Uretprobe(symbol, objs.UretprobeZshReadline, nil)
	if err != nil {
		return fmt.Errorf("creating uretprobe: %s", err)
	}
	defer up.Close()

	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		return fmt.Errorf("creating event reader: %s", err)
	}

	go func() {
		listenForEvents(rd, uid)
	}()

	<-ctx.Done()
	log.Logger.Info("Context canceled, stopping BPF...")
	if err := rd.Close(); err != nil {
		logger.Error("Closing event reader", "err", err)
	}
	return nil
}

func listenForEvents(rd *ringbuf.Reader, uid *int) {
	logger := log.Logger
	logger.Info("Listening for BPF events...")

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				logger.Info("Ringbuf is closed, bailing out")
				return
			}
			logger.Error("Failed to read from event reader", "err", err)
			continue
		}

		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			logger.Error("Parsing event", "err", err)
			continue
		}

		if uid == nil || *uid == int(event.Uid) {
			if line := strings.TrimSpace(unix.ByteSliceToString(event.Line[:])); line != "" {
				logger.Debug("Saving last line", "pid", event.Pid)
				storage.Add(int(event.Pid), line)
			}
		}
	}
}
